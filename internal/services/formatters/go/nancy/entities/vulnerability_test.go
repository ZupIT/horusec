// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package entities

import (
	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestGetDescription(t *testing.T) {
	t.Run("should success description with url", func(t *testing.T) {
		vulnerability := Vulnerability{
			Title:       "test",
			Description: "test.",
			CvssScore:   "1.0",
			Reference:   "test",
		}

		assert.Equal(t, "test\ntest. For more information, please checkout the following url (test).",
			vulnerability.GetDescription())
	})

	t.Run("should success description without url", func(t *testing.T) {
		vulnerability := Vulnerability{
			Title:       "test",
			Description: "test.",
			CvssScore:   "1.0",
			Reference:   "",
		}

		assert.Equal(t, "test\ntest.",
			vulnerability.GetDescription())
	})
}

func TestGetSeverity(t *testing.T) {
	t.Run("should return critical vulnerability", func(t *testing.T) {
		vulnerability := Vulnerability{
			CvssScore:   "10.0",
		}

		assert.Equal(t, severities.Critical, vulnerability.GetSeverity())
	})

	t.Run("should return high vulnerability", func(t *testing.T) {
		vulnerability := Vulnerability{
			CvssScore:   "8.0",
		}

		assert.Equal(t, severities.High, vulnerability.GetSeverity())
	})

	t.Run("should return medium vulnerability", func(t *testing.T) {
		vulnerability := Vulnerability{
			CvssScore:   "6.0",
		}

		assert.Equal(t, severities.Medium, vulnerability.GetSeverity())
	})

	t.Run("should return low vulnerability", func(t *testing.T) {
		vulnerability := Vulnerability{
			CvssScore:   "2.0",
		}

		assert.Equal(t, severities.Low, vulnerability.GetSeverity())
	})

	t.Run("should return unknown vulnerability", func(t *testing.T) {
		vulnerability := Vulnerability{
			CvssScore:   "0",
		}

		assert.Equal(t, severities.Unknown, vulnerability.GetSeverity())
	})

	t.Run("should return unknown vulnerability when failed to parse score", func(t *testing.T) {
		vulnerability := Vulnerability{
			CvssScore:   "test",
		}

		assert.Equal(t, severities.Unknown, vulnerability.GetSeverity())
	})
}
