// Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package entities

import (
	"fmt"
	"strconv"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"

	"github.com/ZupIT/horusec/internal/services/formatters/go/nancy/enums"
)

type Vulnerability struct {
	Title       string `json:"Title"`
	Description string `json:"Description"`
	CvssScore   string `json:"CvssScore"`
	Reference   string `json:"Reference"`
}

func (v *Vulnerability) GetDescription() string {
	return fmt.Sprintf("%s\n%s(%s)", v.Title, v.Description, v.Reference)
}

func (v *Vulnerability) GetSeverity() severities.Severity {
	score, err := strconv.ParseFloat(v.CvssScore, enums.BitSize)
	if err != nil {
		return severities.Unknown
	}

	return v.isCriticalVulnerability(score)
}

func (v *Vulnerability) isCriticalVulnerability(score float64) severities.Severity {
	if score >= enums.CriticalScoreMin {
		return severities.Critical
	}

	return v.isHighVulnerability(score)
}

func (v *Vulnerability) isHighVulnerability(score float64) severities.Severity {
	if score >= enums.HighScoreMin && score <= enums.HighScoreMax {
		return severities.High
	}

	return v.isMediumVulnerability(score)
}

func (v *Vulnerability) isMediumVulnerability(score float64) severities.Severity {
	if score >= enums.MediumScoreMin && score <= enums.MediumScoreMax {
		return severities.Medium
	}

	return v.isLowVulnerability(score)
}

func (v *Vulnerability) isLowVulnerability(score float64) severities.Severity {
	if score >= enums.LowScoreMin && score <= enums.LowScoreMax {
		return severities.Low
	}

	return severities.Unknown
}
