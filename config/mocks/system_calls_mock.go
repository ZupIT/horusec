// Code generated by MockGen. DO NOT EDIT.
// Source: ./config/system_calls.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISystemCalls is a mock of ISystemCalls interface.
type MockISystemCalls struct {
	ctrl     *gomock.Controller
	recorder *MockISystemCallsMockRecorder
}

// MockISystemCallsMockRecorder is the mock recorder for MockISystemCalls.
type MockISystemCallsMockRecorder struct {
	mock *MockISystemCalls
}

// NewMockISystemCalls creates a new mock instance.
func NewMockISystemCalls(ctrl *gomock.Controller) *MockISystemCalls {
	mock := &MockISystemCalls{ctrl: ctrl}
	mock.recorder = &MockISystemCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISystemCalls) EXPECT() *MockISystemCallsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISystemCalls) Create(name string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISystemCallsMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISystemCalls)(nil).Create), name)
}

// Getwd mocks base method.
func (m *MockISystemCalls) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockISystemCallsMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockISystemCalls)(nil).Getwd))
}

// IsNotExist mocks base method.
func (m *MockISystemCalls) IsNotExist(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist.
func (mr *MockISystemCallsMockRecorder) IsNotExist(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MockISystemCalls)(nil).IsNotExist), err)
}

// MkdirAll mocks base method.
func (m *MockISystemCalls) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockISystemCallsMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockISystemCalls)(nil).MkdirAll), path, perm)
}

// Stat mocks base method.
func (m *MockISystemCalls) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockISystemCallsMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockISystemCalls)(nil).Stat), name)
}
